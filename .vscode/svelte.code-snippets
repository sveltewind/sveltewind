{
	"Bindable Prop": {
		"prefix": "@bindable",
		"body": ["$1 = \\$bindable(),"]
	},
	"Initiate Component": {
		"prefix": "@component",
		"body": [
			"<script lang=\"ts\">",
			"",
			"\t// imports",
			"\timport { use as useAction } from '\\$lib/actions/index.js';",
			"\timport { theme } from '\\$lib/index.js';",
			"\timport { twMerge } from 'tailwind-merge';",
			"",
			"\t// props",
			"\tlet classes = \\$state('');",
			"\tlet {",
			"\t\tclass: className = undefined,",
			"\t\tchildren,",
			"\t\tisVisible = \\$bindable(),",
			"\t\tthis: elem = \\$bindable(),",
			"\t\ttransition = \\$bindable(),",
			"\t\tuse = [],",
			"\t\t...props",
			"\t}: {",
			"\t\tclass?: string;",
			"\t\tchildren?: any;",
			"\t\tisVisible?: boolean;",
			"\t\tthis?: any;",
			"\t\ttransition?: any[];",
			"\t\tuse?: any[];",
			"\t} = \\$props();",
			"\tconst transitionHandler = (node: HTMLElement) => {",
			"\t\tif (transition === undefined) return;",
			"\t\tif (transition.length === 1) return transition[0](node);",
			"\t\treturn transition[0](node, transition[1]);",
			"\t};",
			"",
			"\t// effects",
			"\t\\$effect(() => {",
			"\t\tclasses = twMerge(theme.get('$1'), className);",
			"\t});",
			"\t\\$effect(() => {",
			"\t\tif (isVisible === undefined) isVisible = true;",
			"\t});",
			"</script>",
			"",
			"{#if isVisible}",
			"\t<$1$2",
			"\t\t{...props}",
			"\t\tbind:this={elem}",
			"\t\tclass={classes}",
			"\t\ttransition:transitionHandler",
			"\t\tuse:useAction={[...use]}",
			"\t>",
			"\t\t{#if children !== undefined}",
			"\t\t\t{@render children()}",
			"\t\t{/if}",
			"\t</$1$2>",
			"{/if}"
		]
	}
}
